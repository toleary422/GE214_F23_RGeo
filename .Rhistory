setwd("I:")
plot(cars)
plot(cars)
plot(cars)
plot(cars)
library(sf) #here we tell R that we need the Simple Features library (sf)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
tm_shape(precs) +
tm_fill() +
tm_borders() +
tm_text("Ward_Precinct", size="AREA")
precs = read_sf("data/Voting_Precincts_Based_on_2020_Census_Data.geojson")
#the "head" function tells us what is in the object and what kind of object it is
head(precs)
tm_shape(precs) +
tm_fill() +
tm_borders() +
tm_text("Ward_Precinct", size="AREA")
tm_shape(precs) +
tm_fill()
#now let's try it with some borders
tm_shape(precs) +
tm_fill() +
tm_borders()
#what about some labels?
tm_shape(precs) +
tm_fill() +
tm_borders() +
tm_text("Ward_Precinct", size="AREA")
library(sf) #here we tell R that we need the Simple Features library (sf)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
#then we create an object called "precs," which is short for precincts and fill it with the data from our geojson file
precs = read_sf("data/Voting_Precincts_Based_on_2020_Census_Data.geojson")
#the "head" function tells us what is in the object and what kind of object it is
head(precs)
#let's plot our object
tm_shape(precs) +
tm_fill()
#now let's try it with some borders
tm_shape(precs) +
tm_fill() +
tm_borders()
#what about some labels?
tm_shape(precs) +
tm_fill() +
tm_borders() +
tm_text("Ward_Precinct", size="AREA")
#that didn't work? how do we learn more about our tm_* (tmap) functions?
?tmap
#R will let you make a map object and reuse it
woo_map1 = tm_shape(precs)+tm_fill()+tm_borders()
tm_shape(precs) +
tm_fill() +
tm_borders() +
tm_text("Ward_Precinct", size="AREA", col="steelblue")
col?
?col
tm_shape(precs) +
tm_fill(col="darkgreen") +
tm_borders() +
tm_text("Ward_Precinct", size="AREA", col="steelblue")
#what about some labels?
tm_shape(precs) +
tm_fill(col="darkgreen") +
tm_borders() +
tm_text("Ward_Precinct", size="AREA", col="blue")
tm_shape(precs) +
tm_fill(col="beige") +
tm_borders() +
tm_text("Ward_Precinct", size="AREA", col="steelblue")
tm_shape(precs) +
tm_fill(col="beige") +
tm_borders(col="darkgreen") +
tm_text("Ward_Precinct", size="AREA", col="steelblue")
woo_map1 = tm_shape(precs) +
tm_fill(col="beige") +
tm_borders(col="darkgreen") +
tm_text("Ward_Precinct", size="AREA", col="steelblue")
woo_map1
setwd("I:/Students/toleary/GE214_F23_RGeo")
# Polling Stations
Your task is to make a new section that imports the voting polling stations and places them on a map.
polls = read_sf("data/Polling_Locations.geojson")
polls = read_sf("data/Polling_Locations.geojson")
tm_shape(polls)
polls = read_sf("data/Polling_Locations.geojson")
tm_shape(polls) + tm_fill()
```{r}
polls = read_sf("data/Polling_Locations.geojson")
tm_shape(polls) + tm_symbols()
polls = read_sf("data/Polling_Locations.geojson")
woo_map2 = tm_shape(polls) + tm_symbols()
woo_map1 + woo_map2
setwd("I:/Students/toleary/GE214_F23_RGeo")
plot(cars)
library(sf) #here we tell R that we need the Simple Features library (sf)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
#then we create an object called "precs," which is short for precincts and fill it with the data from our geojson file
precs = read_sf("data/Voting_Precincts_Based_on_2020_Census_Data.geojson")
#the "head" function tells us what is in the object and what kind of object it is
head(precs)
#let's plot our object
tm_shape(precs) +
tm_fill()
#now let's try it with some borders
tm_shape(precs) +
tm_fill() +
tm_borders()
#what about some labels?
tm_shape(precs) +
tm_fill(col="beige") +
tm_borders(col="darkgreen") +
tm_text("Ward_Precinct", size="AREA", col="steelblue")
#that didn't work? how do we learn more about our tm_* (tmap) functions?
?tmap
#R will let you make a map object and reuse it
woo_map1 = tm_shape(precs) +
tm_fill(col="beige") +
tm_borders(col="darkgreen") +
tm_text("Ward_Precinct", size="AREA", col="steelblue")
woo_map1
polls = read_sf("data/Polling_Locations.geojson")
woo_map2 = tm_shape(polls) + tm_symbols()
woo_map1 + woo_map2
View(precs)
library(dplyr)
results = read.ssv("worc_23_election_atlarge.csv")
```{r}
library(dplyr)
results = read.csv("worc_23_election_atlarge.csv")
library(dplyr)
results = read.csv("worc_23_election_atlarge.csv")
library(dplyr)
results = read.csv("worc_23_election_atlarge.csv")
head(results)
prec_results = left_join(precs, results, by=c('Ward_Precinct'='ward'))
prec_results = left_join(precs, results, by=c('Ward_Precinct'='ward'))
View(precs)
#then we create an object called "precs," which is short for precincts and fill it with the data from our geojson file
precs = read_sf("data/Voting_Precincts_Based_on_2020_Census_Data.geojson")
library(sf) #here we tell R that we need the Simple Features library (sf)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
#then we create an object called "precs," which is short for precincts and fill it with the data from our geojson file
precs = read_sf("data/Voting_Precincts_Based_on_2020_Census_Data.geojson")
#the "head" function tells us what is in the object and what kind of object it is
head(precs)
#let's plot our object
tm_shape(precs) +
tm_fill()
#now let's try it with some borders
tm_shape(precs) +
tm_fill() +
tm_borders()
#what about some labels?
tm_shape(precs) +
tm_fill() +
tm_borders() +
tm_text("Ward_Precinct","AREA")
#that didn't work? how do we learn more about our tm_* (tmap) functions?
?tmap
#R will let you make a map object and reuse it
woo_map1 = tm_shape(precs)+tm_fill()+tm_borders()
woo_map1
prec_results = left_join(precs, results, by=c('Ward_Precinct'='ward'))
m_shape(prec_results) + tm_polygons("creamer")
tm_shape(prec_results) + tm_polygons("creamer")
creamer_map = tm_shape(prec_results) + tm_polygons("creamer")
morales_map = tm_shape(prec_results) + tm_polygons("morales")
tmap_arrange(creamer_map,morales_map)
mapz = list()
for (i in candidates[1:12]){ # this is telling R to go through our list of candidates and for each one do something
#the first thing to do is make a map, the important thing here is the tm_polygons uses the variable "i", which is the name of a candidate -- technically the name of a column -- that it will use to create the map.
#STUDENTS: try adjusting the tm_polygons function with properties you developed above to change the maps
themap = tm_shape(prec_results) + tm_polygons(i) + tm_layout(legend.outside = TRUE)
mapz<-append(mapz,list(themap)) #we then add each map to our list
tmap_arrange(mapz, ncol=4)
#we need to make a list of all of the candidates that we want to make maps for
candidates = colnames(prec_results[8:19]) # we use 8 through 19 because those are the columns with our candidates
#we need to make an empty list that will hold our maps
## IMPORTANT: If you re-run the loop below, it will keep adding to the list, so you need to run this as part of the loop to clear the list each-time
mapz = list()
for (i in candidates[1:12]){ # this is telling R to go through our list of candidates and for each one do something
#the first thing to do is make a map, the important thing here is the tm_polygons uses the variable "i", which is the name of a candidate -- technically the name of a column -- that it will use to create the map.
#STUDENTS: try adjusting the tm_polygons function with properties you developed above to change the maps
themap = tm_shape(prec_results) + tm_polygons(i) + tm_layout(legend.outside = TRUE)
mapz<-append(mapz,list(themap)) #we then add each map to our list
}
#use tmap_arrange to display all the maps in 4 columns
tmap_arrange(mapz, ncol=4)
polls = read_sf("data/Polling_Locations.geojson")
woo_map2 = tm_shape(polls) +
tm_dots(col="red")
woo_map1+woo_map2
library(dplyr) #we need one more library here to do some data wrangling later
results = read.csv("data/worc_23_election_atlarge.csv") #create an object called "results" that contains our csv
head(results) #check and see that results was read into R correctly and what kind of data we have here
prec_results = left_join(precs, results, by=c('Ward_Precinct'='ward'))
head(prec_results)
tm_shape(prec_results) + tm_polygons("creamer")
creamer_map = tm_shape(prec_results) + tm_polygons("creamer")
morales_map = tm_shape(prec_results) + tm_polygons("morales")
tmap_arrange(creamer_map,morales_map)
#many maps
#we need to make a list of all of the candidates that we want to make maps for
candidates = colnames(prec_results[8:19]) # we use 8 through 19 because those are the columns with our candidates
#we need to make an empty list that will hold our maps
## IMPORTANT: If you re-run the loop below, it will keep adding to the list, so you need to run this as part of the loop to clear the list each-time
mapz = list()
for (i in candidates[1:12]){ # this is telling R to go through our list of candidates and for each one do something
#the first thing to do is make a map, the important thing here is the tm_polygons uses the variable "i", which is the name of a candidate -- technically the name of a column -- that it will use to create the map.
#STUDENTS: try adjusting the tm_polygons function with properties you developed above to change the maps
themap = tm_shape(prec_results) + tm_polygons(i) + tm_layout(legend.outside = TRUE)
mapz<-append(mapz,list(themap)) #we then add each map to our list
}
#use tmap_arrange to display all the maps in 4 columns
tmap_arrange(mapz, ncol=4)
tm_shape(prec_results) + tm_polygons("creamer")
creamer_map = tm_shape(prec_results) + tm_polygons("creamer")
morales_map = tm_shape(prec_results) + tm_polygons("morales")
tmap_arrange(creamer_map,morales_map)
#many maps
#we need to make a list of all of the candidates that we want to make maps for
candidates = colnames(prec_results[8:19]) # we use 8 through 19 because those are the columns with our candidates
#we need to make an empty list that will hold our maps
## IMPORTANT: If you re-run the loop below, it will keep adding to the list, so you need to run this as part of the loop to clear the list each-time
mapz = list()
for (i in candidates[1:12]){ # this is telling R to go through our list of candidates and for each one do something
#the first thing to do is make a map, the important thing here is the tm_polygons uses the variable "i", which is the name of a candidate -- technically the name of a column -- that it will use to create the map.
#STUDENTS: try adjusting the tm_polygons function with properties you developed above to change the maps
themap = tm_shape(prec_results) + tm_polygons(i) + tm_layout(legend.outside = TRUE)
mapz<-append(mapz,list(themap)) #we then add each map to our list
}
#use tmap_arrange to display all the maps in 4 columns
tmap_arrange(mapz, ncol=4)
